{
  "language": "Solidity",
  "sources": {
    "contracts/governance/BeetsBar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract BeetsBar is ERC20(\"FreshBeets\", \"fBEETS\") {\n    using SafeERC20 for IERC20;\n\n    IERC20 public vestingToken;\n\n    event Enter(\n        address indexed user,\n        uint256 vestingInAmount,\n        uint256 mintedAmount\n    );\n    event Leave(\n        address indexed user,\n        uint256 vestingOutAmount,\n        uint256 burnedAmount\n    );\n    event ShareRevenue(uint256 amount);\n\n    constructor(IERC20 _vestingToken) {\n        vestingToken = _vestingToken;\n    }\n\n    function enter(uint256 _amount) external {\n        if (_amount > 0) {\n            uint256 totalLockedTokenSupply = vestingToken.balanceOf(\n                address(this)\n            );\n\n            uint256 totalFreshBeets = totalSupply();\n\n            vestingToken.transferFrom(msg.sender, address(this), _amount);\n            uint256 mintAmount;\n            // If no fBeets exists, mint it 1:1 to the amount put in\n            if (totalFreshBeets == 0 || totalLockedTokenSupply == 0) {\n                mintAmount = _amount;\n            }\n            // Calculate and mint the amount of fBeets the blp is worth. The ratio will change overtime\n            else {\n                uint256 shareOfFreshBeets = (_amount * totalFreshBeets) /\n                    totalLockedTokenSupply;\n\n                mintAmount = shareOfFreshBeets;\n            }\n            _mint(msg.sender, mintAmount);\n            emit Enter(msg.sender, _amount, mintAmount);\n        }\n    }\n\n    function leave(uint256 _shareOfFreshBeets) external {\n        if (_shareOfFreshBeets > 0) {\n            uint256 totalVestedTokenSupply = vestingToken.balanceOf(\n                address(this)\n            );\n            uint256 totalFreshBeets = totalSupply();\n            // Calculates the amount of vestingToken the fBeets are worth\n            uint256 amount = (_shareOfFreshBeets * totalVestedTokenSupply) /\n                totalFreshBeets;\n            _burn(msg.sender, _shareOfFreshBeets);\n            vestingToken.transfer(msg.sender, amount);\n\n            emit Leave(msg.sender, amount, _shareOfFreshBeets);\n        }\n    }\n\n    function shareRevenue(uint256 _amount) external {\n        vestingToken.transferFrom(msg.sender, address(this), _amount);\n        emit ShareRevenue(_amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vesting/MasterChefLpTokenTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../token/BeethovenxMasterChef.sol\";\n\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/utils/TokenTimelock.sol\n\n/**\n * @dev A token holder contract that will allow a beneficiary to extract the\n * tokens after a given release time.\n *\n * Useful for simple vesting schedules like \"advisors get all of their tokens\n * after 1 year\".\n */\n\n/*\n    Additions:\n        - stake tokens on deposit in master chef pool\n        - allow withdrawal of master chef rewards at any time\n        - un-stake and transfer tokens to beneficiary on release\n*/\ncontract MasterChefLpTokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 private immutable _token;\n\n    // beneficiary of tokens after they are released\n    address private immutable _beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 private immutable _releaseTime;\n\n    BeethovenxMasterChef private _masterChef;\n\n    uint256 private immutable _masterChefPoolId;\n\n    constructor(\n        IERC20 token_,\n        address beneficiary_,\n        uint256 releaseTime_,\n        BeethovenxMasterChef masterChef_,\n        uint256 masterChefPoolId_\n    ) {\n        require(\n            releaseTime_ > block.timestamp,\n            \"TokenTimelock: release time is before current time\"\n        );\n        require(\n            masterChef_.lpTokens(masterChefPoolId_) == token_,\n            \"Provided poolId not eligible for this token\"\n        );\n        _token = token_;\n        _beneficiary = beneficiary_;\n        _releaseTime = releaseTime_;\n        _masterChef = masterChef_;\n        _masterChefPoolId = masterChefPoolId_;\n    }\n\n    /**\n     * @return the token being held.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the time when the tokens are released.\n     */\n    function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n    function release() public {\n        require(\n            block.timestamp >= releaseTime(),\n            \"TokenTimelock: current time is before release time\"\n        );\n\n        (uint256 amount, uint256 rewardDebt) = _masterChef.userInfo(\n            masterChefPoolId(),\n            address(this)\n        );\n        // withdraw & harvest all from master chef\n        _masterChef.withdrawAndHarvest(\n            masterChefPoolId(),\n            amount,\n            beneficiary()\n        );\n\n        // release everything which remained on this contract\n        uint256 localAmount = token().balanceOf(address(this));\n\n        if (localAmount > 0) {\n            token().safeTransfer(beneficiary(), localAmount);\n        }\n    }\n\n    function masterChefPoolId() public view returns (uint256) {\n        return _masterChefPoolId;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to master chef pool.\n     */\n    function depositAllToMasterChef(uint256 amount) external {\n        _token.safeTransferFrom(msg.sender, address(this), amount);\n\n        _token.approve(address(_masterChef), _token.balanceOf(address(this)));\n        _masterChef.deposit(\n            _masterChefPoolId,\n            _token.balanceOf(address(this)),\n            address(this)\n        );\n    }\n\n    function harvest() external {\n        _masterChef.harvest(masterChefPoolId(), beneficiary());\n    }\n}\n"
    },
    "contracts/token/BeethovenxMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./BeethovenxToken.sol\";\nimport \"../interfaces/IRewarder.sol\";\n\n/*\n    This master chef is based on SUSHI's version with some adjustments:\n     - Upgrade to pragma 0.8.7\n     - therefore remove usage of SafeMath (built in overflow check for solidity > 8)\n     - Merge sushi's master chef V1 & V2 (no usage of dummy pool)\n     - remove withdraw function (without harvest) => requires the rewardDebt to be an signed int instead of uint which requires a lot of casting and has no real usecase for us\n     - no dev emissions, but treasury emissions instead\n     - treasury percentage is subtracted from emissions instead of added on top\n     - update of emission rate with upper limit of 6 BEETS/block\n     - more require checks in general\n*/\n\n// Have fun reading it. Hopefully it's still bug-free\ncontract BeethovenxMasterChef is Ownable {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of BEETS\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accBeetsPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accBeetsPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        // we have a fixed number of BEETS tokens released per block, each pool gets his fraction based on the allocPoint\n        uint256 allocPoint; // How many allocation points assigned to this pool. the fraction BEETS to distribute per block.\n        uint256 lastRewardBlock; // Last block number that BEETS distribution occurs.\n        uint256 accBeetsPerShare; // Accumulated BEETS per LP share. this is multiplied by ACC_BEETS_PRECISION for more exact results (rounding errors)\n    }\n    // The BEETS TOKEN!\n    BeethovenxToken public beets;\n\n    // Treasury address.\n    address public treasuryAddress;\n\n    // BEETS tokens created per block.\n    uint256 public beetsPerBlock;\n\n    uint256 private constant ACC_BEETS_PRECISION = 1e12;\n\n    // distribution percentages: a value of 1000 = 100%\n    // 12.8% percentage of pool rewards that goes to the treasury.\n    uint256 public constant TREASURY_PERCENTAGE = 128;\n\n    // 87.2% percentage of pool rewards that goes to LP holders.\n    uint256 public constant POOL_PERCENTAGE = 872;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens per pool. poolId => address => userInfo\n    /// @notice Address of the LP token for each MCV pool.\n    IERC20[] public lpTokens;\n\n    EnumerableSet.AddressSet private lpTokenAddresses;\n\n    /// @notice Address of each `IRewarder` contract in MCV.\n    IRewarder[] public rewarder;\n\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping form poolId => user Address => User Info\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when BEETS mining starts.\n    uint256 public startBlock;\n\n    event Deposit(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Withdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event LogPoolAddition(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IERC20 indexed lpToken,\n        IRewarder indexed rewarder\n    );\n    event LogSetPool(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IRewarder indexed rewarder,\n        bool overwrite\n    );\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardBlock,\n        uint256 lpSupply,\n        uint256 accBeetsPerShare\n    );\n    event SetTreasuryAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n    event UpdateEmissionRate(address indexed user, uint256 _beetsPerSec);\n\n    constructor(\n        BeethovenxToken _beets,\n        address _treasuryAddress,\n        uint256 _beetsPerBlock,\n        uint256 _startBlock\n    ) {\n        require(\n            _beetsPerBlock <= 6e18,\n            \"maximum emission rate of 6 beets per block exceeded\"\n        );\n        beets = _beets;\n        treasuryAddress = _treasuryAddress;\n        beetsPerBlock = _beetsPerBlock;\n        startBlock = _startBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        IRewarder _rewarder\n    ) public onlyOwner {\n        require(\n            Address.isContract(address(_lpToken)),\n            \"add: LP token must be a valid contract\"\n        );\n        require(\n            Address.isContract(address(_rewarder)) ||\n                address(_rewarder) == address(0),\n            \"add: rewarder must be contract or zero\"\n        );\n        // we make sure the same LP cannot be added twice which would cause trouble\n        require(\n            !lpTokenAddresses.contains(address(_lpToken)),\n            \"add: LP already added\"\n        );\n\n        // respect startBlock!\n        uint256 lastRewardBlock = block.number > startBlock\n            ? block.number\n            : startBlock;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n\n        // LP tokens, rewarders & pools are always on the same index which translates into the pid\n        lpTokens.push(_lpToken);\n        lpTokenAddresses.add(address(_lpToken));\n        rewarder.push(_rewarder);\n\n        poolInfo.push(\n            PoolInfo({\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accBeetsPerShare: 0\n            })\n        );\n        emit LogPoolAddition(\n            lpTokens.length - 1,\n            _allocPoint,\n            _lpToken,\n            _rewarder\n        );\n    }\n\n    // Update the given pool's BEETS allocation point. Can only be called by the owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New AP of the pool.\n    /// @param _rewarder Address of the rewarder delegate.\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        IRewarder _rewarder,\n        bool overwrite\n    ) public onlyOwner {\n        require(\n            Address.isContract(address(_rewarder)) ||\n                address(_rewarder) == address(0),\n            \"set: rewarder must be contract or zero\"\n        );\n\n        // we re-adjust the total allocation points\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n\n        poolInfo[_pid].allocPoint = _allocPoint;\n\n        if (overwrite) {\n            rewarder[_pid] = _rewarder;\n        }\n        emit LogSetPool(\n            _pid,\n            _allocPoint,\n            overwrite ? _rewarder : rewarder[_pid],\n            overwrite\n        );\n    }\n\n    // View function to see pending BEETS on frontend.\n    function pendingBeets(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256 pending)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        // how many BEETS per lp token\n        uint256 accBeetsPerShare = pool.accBeetsPerShare;\n        // total staked lp tokens in this pool\n        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\n\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 blocksSinceLastReward = block.number - pool.lastRewardBlock;\n            // based on the pool weight (allocation points) we calculate the beets rewarded for this specific pool\n            uint256 beetsRewards = (blocksSinceLastReward *\n                beetsPerBlock *\n                pool.allocPoint) / totalAllocPoint;\n\n            // we take parts of the rewards for treasury, these can be subject to change, so we recalculate it\n            // a value of 1000 = 100%\n            uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\n                1000;\n\n            // we calculate the new amount of accumulated beets per LP token\n            accBeetsPerShare =\n                accBeetsPerShare +\n                ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\n        }\n        // based on the number of LP tokens the user owns, we calculate the pending amount by subtracting the amount\n        // which he is not eligible for (joined the pool later) or has already harvested\n        pending =\n            (user.amount * accBeetsPerShare) /\n            ACC_BEETS_PRECISION -\n            user.rewardDebt;\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[_pid];\n\n        if (block.number > pool.lastRewardBlock) {\n            // total lp tokens staked for this pool\n            uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\n            if (lpSupply > 0) {\n                uint256 blocksSinceLastReward = block.number -\n                    pool.lastRewardBlock;\n\n                // rewards for this pool based on his allocation points\n                uint256 beetsRewards = (blocksSinceLastReward *\n                    beetsPerBlock *\n                    pool.allocPoint) / totalAllocPoint;\n\n                uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\n                    1000;\n\n                beets.mint(\n                    treasuryAddress,\n                    (beetsRewards * TREASURY_PERCENTAGE) / 1000\n                );\n\n                beets.mint(address(this), beetsRewardsForPool);\n\n                pool.accBeetsPerShare =\n                    pool.accBeetsPerShare +\n                    ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\n            }\n            pool.lastRewardBlock = block.number;\n            poolInfo[_pid] = pool;\n\n            emit LogUpdatePool(\n                _pid,\n                pool.lastRewardBlock,\n                lpSupply,\n                pool.accBeetsPerShare\n            );\n        }\n    }\n\n    // Deposit LP tokens to MasterChef for BEETS allocation.\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        address _to\n    ) public {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][_to];\n\n        user.amount = user.amount + _amount;\n        // since we add more LP tokens, we have to keep track of the rewards he is not eligible for\n        // if we would not do that, he would get rewards like he added them since the beginning of this pool\n        // note that only the accBeetsPerShare have the precision applied\n        user.rewardDebt =\n            user.rewardDebt +\n            (_amount * pool.accBeetsPerShare) /\n            ACC_BEETS_PRECISION;\n\n        IRewarder _rewarder = rewarder[_pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onBeetsReward(_pid, _to, _to, 0, user.amount);\n        }\n\n        lpTokens[_pid].safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Deposit(msg.sender, _pid, _amount, _to);\n    }\n\n    function harvestAll(uint256[] calldata _pids, address _to) external {\n        for (uint256 i = 0; i < _pids.length; i++) {\n            if (userInfo[_pids[i]][msg.sender].amount > 0) {\n                harvest(_pids[i], _to);\n            }\n        }\n    }\n\n    /// @notice Harvest proceeds for transaction sender to `_to`.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _to Receiver of BEETS rewards.\n    function harvest(uint256 _pid, address _to) public {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        // this would  be the amount if the user joined right from the start of the farm\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\n            ACC_BEETS_PRECISION;\n        // subtracting the rewards the user is not eligible for\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\n\n        // we set the new rewardDebt to the current accumulated amount of rewards for his amount of LP token\n        user.rewardDebt = accumulatedBeets;\n\n        if (eligibleBeets > 0) {\n            safeBeetsTransfer(_to, eligibleBeets);\n        }\n\n        IRewarder _rewarder = rewarder[_pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onBeetsReward(\n                _pid,\n                msg.sender,\n                _to,\n                eligibleBeets,\n                user.amount\n            );\n        }\n\n        emit Harvest(msg.sender, _pid, eligibleBeets);\n    }\n\n    /// @notice Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _amount LP token amount to withdraw.\n    /// @param _to Receiver of the LP tokens and BEETS rewards.\n    function withdrawAndHarvest(\n        uint256 _pid,\n        uint256 _amount,\n        address _to\n    ) public {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(_amount <= user.amount, \"cannot withdraw more than deposited\");\n\n        // this would  be the amount if the user joined right from the start of the farm\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\n            ACC_BEETS_PRECISION;\n        // subtracting the rewards the user is not eligible for\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\n\n        /*\n            after harvest & withdraw, he should be eligible for exactly 0 tokens\n            => userInfo.amount * pool.accBeetsPerShare / ACC_BEETS_PRECISION == userInfo.rewardDebt\n            since we are removing some LP's from userInfo.amount, we also have to remove\n            the equivalent amount of reward debt\n        */\n\n        user.rewardDebt =\n            accumulatedBeets -\n            (_amount * pool.accBeetsPerShare) /\n            ACC_BEETS_PRECISION;\n        user.amount = user.amount - _amount;\n\n        safeBeetsTransfer(_to, eligibleBeets);\n\n        IRewarder _rewarder = rewarder[_pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onBeetsReward(\n                _pid,\n                msg.sender,\n                _to,\n                eligibleBeets,\n                user.amount\n            );\n        }\n\n        lpTokens[_pid].safeTransfer(_to, _amount);\n\n        emit Withdraw(msg.sender, _pid, _amount, _to);\n        emit Harvest(msg.sender, _pid, eligibleBeets);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid, address _to) public {\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        IRewarder _rewarder = rewarder[_pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onBeetsReward(_pid, msg.sender, _to, 0, 0);\n        }\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpTokens[_pid].safeTransfer(_to, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\n    }\n\n    // Safe BEETS transfer function, just in case if rounding error causes pool to not have enough BEETS.\n    function safeBeetsTransfer(address _to, uint256 _amount) internal {\n        uint256 beetsBalance = beets.balanceOf(address(this));\n        if (_amount > beetsBalance) {\n            beets.transfer(_to, beetsBalance);\n        } else {\n            beets.transfer(_to, _amount);\n        }\n    }\n\n    // Update treasury address by the owner.\n    function treasury(address _treasuryAddress) public onlyOwner {\n        treasuryAddress = _treasuryAddress;\n        emit SetTreasuryAddress(treasuryAddress, _treasuryAddress);\n    }\n\n    function updateEmissionRate(uint256 _beetsPerBlock) public onlyOwner {\n        require(\n            _beetsPerBlock <= 6e18,\n            \"maximum emission rate of 6 beets per block exceeded\"\n        );\n        beetsPerBlock = _beetsPerBlock;\n        emit UpdateEmissionRate(msg.sender, _beetsPerBlock);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/token/BeethovenxToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BeethovenxToken is ERC20(\"BeethovenxToken\", \"BEETS\"), Ownable {\n    uint256 public constant MAX_SUPPLY = 250_000_000e18; // 250 million beets\n\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        require(\n            totalSupply() + _amount <= MAX_SUPPLY,\n            \"BEETS::mint: cannot exceed max supply\"\n        );\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface IRewarder {\n    function onBeetsReward(\n        uint256 pid,\n        address user,\n        address recipient,\n        uint256 beetsAmount,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(\n        uint256 pid,\n        address user,\n        uint256 beetsAmount\n    ) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/rewarder/TimeBasedRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IRewarder.sol\";\nimport \"../token/BeethovenxMasterChef.sol\";\n\ncontract TimeBasedRewarder is IRewarder, Ownable {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable rewardToken;\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        uint256 accRewardTokenPerShare;\n        uint256 lastRewardTime;\n        uint256 allocPoint;\n    }\n\n    /// @notice Info of each pool.\n    mapping(uint256 => PoolInfo) public poolInfo;\n\n    uint256[] public masterchefPoolIds;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 totalAllocPoint;\n\n    uint256 public rewardPerSecond;\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n    address public immutable MASTERCHEF;\n\n    event LogOnReward(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardTime,\n        uint256 lpSupply,\n        uint256 accRewardTokenPerShare\n    );\n    event LogRewardPerSecond(uint256 rewardPerSecond);\n    event LogInit();\n\n    constructor(\n        IERC20 _rewardToken,\n        uint256 _rewardPerSecond,\n        address _MASTERCHEF\n    ) {\n        rewardToken = _rewardToken;\n        rewardPerSecond = _rewardPerSecond;\n        MASTERCHEF = _MASTERCHEF;\n    }\n\n    function onBeetsReward(\n        uint256 pid,\n        address userAddress,\n        address recipient,\n        uint256,\n        uint256 newLpAmount\n    ) external override onlyMasterChef {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage userPoolInfo = userInfo[pid][userAddress];\n        uint256 pending;\n        if (userPoolInfo.amount > 0) {\n            pending =\n                ((userPoolInfo.amount * pool.accRewardTokenPerShare) /\n                    ACC_TOKEN_PRECISION) -\n                userPoolInfo.rewardDebt;\n            if (pending > rewardToken.balanceOf(address(this))) {\n                pending = rewardToken.balanceOf(address(this));\n            }\n        }\n        userPoolInfo.amount = newLpAmount;\n        userPoolInfo.rewardDebt =\n            (newLpAmount * pool.accRewardTokenPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        if (pending > 0) {\n            rewardToken.safeTransfer(recipient, pending);\n        }\n\n        emit LogOnReward(userAddress, pid, pending, recipient);\n    }\n\n    function pendingTokens(\n        uint256 pid,\n        address user,\n        uint256\n    )\n        external\n        view\n        override\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        IERC20[] memory _rewardTokens = new IERC20[](1);\n        _rewardTokens[0] = (rewardToken);\n        uint256[] memory _rewardAmounts = new uint256[](1);\n        _rewardAmounts[0] = pendingToken(pid, user);\n        return (_rewardTokens, _rewardAmounts);\n    }\n\n    /// @notice Sets the rewards per second to be distributed. Can only be called by the owner.\n    /// @param _rewardPerSecond The amount of token rewards to be distributed per second.\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n        rewardPerSecond = _rewardPerSecond;\n        emit LogRewardPerSecond(_rewardPerSecond);\n    }\n\n    modifier onlyMasterChef() {\n        require(\n            msg.sender == MASTERCHEF,\n            \"Only MasterChef can call this function.\"\n        );\n        _;\n    }\n\n    /// @notice Returns the number of rewarded pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = masterchefPoolIds.length;\n    }\n\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    /// @param allocPoint AP of the new pool.\n    /// @param pid Pid on MasterChef\n    function add(uint256 pid, uint256 allocPoint) public onlyOwner {\n        require(poolInfo[pid].lastRewardTime == 0, \"Pool already exists\");\n        uint256 lastRewardTime = block.timestamp;\n        totalAllocPoint = totalAllocPoint + allocPoint;\n\n        poolInfo[pid] = PoolInfo({\n            allocPoint: allocPoint,\n            lastRewardTime: lastRewardTime,\n            accRewardTokenPerShare: 0\n        });\n        masterchefPoolIds.push(pid);\n        emit LogPoolAddition(pid, allocPoint);\n    }\n\n    /// @notice Update the given pool's reward token allocation point and `IRewarder` contract. Can only be called by the owner.\n    /// @param pid The index of the MasterChef pool. See `poolInfo`.\n    /// @param allocPoint New AP of the pool.\n    function set(uint256 pid, uint256 allocPoint) public onlyOwner {\n        require(poolInfo[pid].lastRewardTime != 0, \"Pool does not exist\");\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[pid].allocPoint +\n            allocPoint;\n\n        poolInfo[pid].allocPoint = allocPoint;\n        emit LogSetPool(pid, allocPoint);\n    }\n\n    /// @notice View function to see pending Token\n    /// @param _pid The index of the MasterChef pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending rewards for a given user.\n    function pendingToken(uint256 _pid, address _user)\n        public\n        view\n        returns (uint256 pending)\n    {\n        PoolInfo memory pool = poolInfo[_pid];\n        if (pool.lastRewardTime == 0) {\n            pending = 0;\n        } else {\n            UserInfo storage user = userInfo[_pid][_user];\n            uint256 accRewardTokenPerShare = pool.accRewardTokenPerShare;\n\n            uint256 totalLpSupply = BeethovenxMasterChef(MASTERCHEF)\n                .lpTokens(_pid)\n                .balanceOf(MASTERCHEF);\n\n            if (block.timestamp > pool.lastRewardTime && totalLpSupply != 0) {\n                uint256 timeSinceLastReward = block.timestamp -\n                    pool.lastRewardTime;\n\n                uint256 rewards = (timeSinceLastReward *\n                    rewardPerSecond *\n                    pool.allocPoint) / totalAllocPoint;\n\n                accRewardTokenPerShare =\n                    accRewardTokenPerShare +\n                    ((rewards * ACC_TOKEN_PRECISION) / totalLpSupply);\n            }\n            pending =\n                ((user.amount * accRewardTokenPerShare) / ACC_TOKEN_PRECISION) -\n                user.rewardDebt;\n            if (pending > rewardToken.balanceOf(address(this))) {\n                pending = rewardToken.balanceOf(address(this));\n            }\n        }\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        if (pool.lastRewardTime != 0 && block.timestamp > pool.lastRewardTime) {\n            uint256 totalLpSupply = BeethovenxMasterChef(MASTERCHEF)\n                .lpTokens(pid)\n                .balanceOf(MASTERCHEF);\n\n            if (totalLpSupply > 0) {\n                uint256 time = block.timestamp - pool.lastRewardTime;\n                uint256 tokenReward = (time *\n                    rewardPerSecond *\n                    pool.allocPoint) / totalAllocPoint;\n                pool.accRewardTokenPerShare =\n                    pool.accRewardTokenPerShare +\n                    ((tokenReward * ACC_TOKEN_PRECISION) / totalLpSupply);\n            }\n            pool.lastRewardTime = block.timestamp;\n            poolInfo[pid] = pool;\n            emit LogUpdatePool(\n                pid,\n                pool.lastRewardTime,\n                totalLpSupply,\n                pool.accRewardTokenPerShare\n            );\n        }\n    }\n\n    /// @notice Emergency withdraw total balance of this token\n    /// @param token The token to withdraw\n    /// @param withdrawTo The address to withdraw to\n    function emergencyWithdraw(address token, address withdrawTo)\n        external\n        onlyOwner\n    {\n        IERC20(token).transfer(\n            withdrawTo,\n            IERC20(token).balanceOf(address(this))\n        );\n    }\n}\n"
    },
    "contracts/token/BeethovenxOhmEmissionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BeethovenxOhmEmissionToken is\n    ERC20(\"BeethovenxOhmEmissionToken\", \"OHMYBEETS\"),\n    Ownable\n{\n    constructor(address _tokenHolderAddress) {\n        _mint(_tokenHolderAddress, 100e18);\n        transferOwnership(_tokenHolderAddress);\n    }\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) ERC20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n}\n"
    },
    "contracts/governance/FBeetsLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\n/*\n    Based on CVX Staking contract for https://www.convexfinance.com - https://github.com/convex-eth/platform/blob/main/contracts/contracts/CvxLocker.sol\n\n     *** Locking mechanism ***\n\n    This locking mechanism is based on epochs with a duration of 1 week. when locking our tokens,\n    the unlock time for this lock period is set to the start of the current running epoch + 17 weeks.\n    The locked tokens of the current epoch are not eligible for voting. Therefore we need to wait for the next\n    epoch until we can vote.\n    All tokens locked within the same epoch share the same lock and therefore the same unlock time.\n\n\n    *** Rewards ***\n    todo:...\n*/\n\ncontract FBeetsLocker is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    struct Epoch {\n        uint256 supply; //epoch locked supply\n        uint256 startTime; //epoch start date\n    }\n\n    IERC20 public immutable lockingToken;\n\n    //rewards\n    struct EarnedData {\n        address token;\n        uint256 amount;\n    }\n\n    address[] public rewardTokens;\n\n    struct Reward {\n        uint256 periodFinish;\n        uint256 rewardRate;\n        uint256 lastUpdateTime;\n        uint256 rewardPerTokenStored;\n    }\n\n    mapping(address => Reward) public rewardData;\n\n    uint256 public constant epochDuration = 86400 * 7;\n\n    // Duration of lock/earned penalty period\n    uint256 public constant lockDuration = epochDuration * 17;\n\n    uint256 public constant denominator = 10000;\n\n    // reward token -> distributor -> is approved to add rewards\n    mapping(address => mapping(address => bool)) public rewardDistributors;\n\n    // user -> reward token -> amount\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenPaid;\n    mapping(address => mapping(address => uint256)) public rewards;\n\n    //supplies and epochs\n    uint256 public totalLockedSupply;\n    Epoch[] public epochs;\n\n    /*\n        We keep the total locked amount and an index to the next unprocessed lock per user.\n        All locks previous to this index have been either withdrawn or relocked and can be ignored.\n    */\n\n    struct Balances {\n        uint256 lockedAmount;\n        uint256 nextUnlockIndex;\n    }\n\n    mapping(address => Balances) public balances;\n\n    /*\n        We keep the amount locked and the unlock time (start epoch + lock duration)\n        for each user\n    */\n    struct LockedBalance {\n        uint256 locked;\n        uint256 unlockTime;\n    }\n\n    mapping(address => LockedBalance[]) public userLocks;\n\n    //management\n    uint256 public kickRewardPerEpoch = 100;\n    uint256 public kickRewardEpochDelay = 4;\n\n    //shutdown\n    bool public isShutdown = false;\n\n    //erc20-like interface\n    string private _name;\n    string private _symbol;\n    uint8 private immutable _decimals;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(IERC20 _lockingToken) {\n        _name = \"Vote Locked fBeets Token\";\n        _symbol = \"vfBeets\";\n        _decimals = 18;\n        lockingToken = _lockingToken;\n\n        epochs.push(Epoch({supply: 0, startTime: _currentEpoch()}));\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /* ========== ADMIN CONFIGURATION ========== */\n\n    // Add a new reward token to be distributed to lockers\n    function addReward(address _rewardsToken, address _distributor)\n        public\n        onlyOwner\n    {\n        require(rewardData[_rewardsToken].lastUpdateTime == 0);\n        require(_rewardsToken != address(lockingToken));\n        rewardTokens.push(_rewardsToken);\n        rewardData[_rewardsToken].lastUpdateTime = uint40(block.timestamp);\n        rewardData[_rewardsToken].periodFinish = uint40(block.timestamp);\n        rewardDistributors[_rewardsToken][_distributor] = true;\n    }\n\n    // Modify approval for an address to call notifyRewardAmount\n    function approveRewardDistributor(\n        address _rewardsToken,\n        address _distributor,\n        bool _approved\n    ) external onlyOwner {\n        require(rewardData[_rewardsToken].lastUpdateTime > 0);\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\n    }\n\n    //set kick incentive\n    function setKickIncentive(\n        uint256 _kickRewardPerEpoch,\n        uint256 _kickRewardEpochDelay\n    ) external onlyOwner {\n        require(_kickRewardPerEpoch <= 500, \"over max rate of 5% per epoch\");\n        require(_kickRewardEpochDelay >= 2, \"min delay of 2 epochs required\");\n        kickRewardPerEpoch = _kickRewardPerEpoch;\n        kickRewardEpochDelay = _kickRewardEpochDelay;\n    }\n\n    //shutdown the contract. release all locks\n    function shutdown() external onlyOwner {\n        isShutdown = true;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function _rewardPerToken(address _rewardsToken)\n        internal\n        view\n        returns (uint256)\n    {\n        return rewardData[_rewardsToken].rewardPerTokenStored;\n    }\n\n    function _earned(\n        address _user,\n        address _rewardsToken,\n        uint256 _balance\n    ) internal view returns (uint256) {\n        return\n            (_balance *\n                (_rewardPerToken(_rewardsToken) -\n                    userRewardPerTokenPaid[_user][_rewardsToken])) /\n            1e18 +\n            rewards[_user][_rewardsToken];\n    }\n\n    function _lastTimeRewardApplicable(uint256 _finishTime)\n        internal\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, _finishTime);\n    }\n\n    function lastTimeRewardApplicable(address _rewardsToken)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish);\n    }\n\n    function rewardPerToken(address _rewardsToken)\n        external\n        view\n        returns (uint256)\n    {\n        return _rewardPerToken(_rewardsToken);\n    }\n\n    function getRewardForDuration(address _rewardsToken)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardData[_rewardsToken].rewardRate * epochDuration;\n    }\n\n    // Address and claimable amount of all reward tokens for the given account\n    function claimableRewards(address _account)\n        external\n        view\n        returns (EarnedData[] memory userRewards)\n    {\n        userRewards = new EarnedData[](rewardTokens.length);\n        uint256 lockedAmount = balances[_account].lockedAmount;\n        for (uint256 i = 0; i < userRewards.length; i++) {\n            address token = rewardTokens[i];\n            userRewards[i].token = token;\n            userRewards[i].amount = _earned(_account, token, lockedAmount);\n        }\n        return userRewards;\n    }\n\n    // total token balance of an account, including unlocked but not withdrawn tokens\n    function lockedBalanceOf(address _user)\n        external\n        view\n        returns (uint256 amount)\n    {\n        return balances[_user].lockedAmount;\n    }\n\n    // an epoch is always the timestamp on the start of an epoch\n    function _currentEpoch() internal view returns (uint256) {\n        uint256 val = (block.timestamp / epochDuration);\n        return val * epochDuration;\n    }\n\n    //balance of an account which only includes properly locked tokens as of the most recent eligible epoch\n    function balanceOf(address _user) external view returns (uint256 amount) {\n        LockedBalance[] storage locks = userLocks[_user];\n        Balances storage userBalance = balances[_user];\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\n\n        //start with current locked amount\n        amount = balances[_user].lockedAmount;\n\n        uint256 locksLength = locks.length;\n        //remove old records only (will be better gas-wise than adding up)\n        for (uint256 i = nextUnlockIndex; i < locksLength; i++) {\n            if (locks[i].unlockTime <= block.timestamp) {\n                amount = amount - locks[i].locked;\n            } else {\n                //stop now as no further checks are needed\n                break;\n            }\n        }\n\n        //also remove amount in the current epoch\n        if (\n            locksLength > 0 &&\n            locks[locksLength - 1].unlockTime - lockDuration == _currentEpoch()\n        ) {\n            amount = amount - locks[locksLength - 1].locked;\n        }\n\n        return amount;\n    }\n\n    //balance of an account which only includes properly locked tokens at the given epoch\n    function balanceAtEpochOf(uint256 _epoch, address _user)\n        external\n        view\n        returns (uint256 amount)\n    {\n        LockedBalance[] storage locks = userLocks[_user];\n\n        //get timestamp of given epoch index\n        uint256 epochStartTime = epochs[_epoch].startTime;\n        //get timestamp of first non-inclusive epoch\n        uint256 cutoffEpoch = epochStartTime - lockDuration;\n\n        //traverse inversely to make more current queries more gas efficient\n        uint256 currentLockIndex = locks.length;\n\n        if (currentLockIndex == 0) {\n            return 0;\n        }\n        do {\n            currentLockIndex--;\n\n            uint256 lockEpoch = locks[currentLockIndex].unlockTime -\n                lockDuration;\n\n            if (lockEpoch < epochStartTime) {\n                if (lockEpoch > cutoffEpoch) {\n                    amount += locks[currentLockIndex].locked;\n                } else {\n                    //stop now as no further checks matter\n                    break;\n                }\n            }\n        } while (currentLockIndex > 0);\n\n        return amount;\n    }\n\n    //supply of all properly locked balances at most recent eligible epoch\n    function totalSupply() external view returns (uint256 supply) {\n        uint256 currentEpoch = _currentEpoch();\n        uint256 cutoffEpoch = currentEpoch - lockDuration;\n        uint256 epochIndex = epochs.length;\n\n        //do not include current epoch's supply\n        if (epochs[epochIndex - 1].startTime == currentEpoch) {\n            epochIndex--;\n        }\n        if (epochIndex == 0) {\n            return 0;\n        }\n\n        //traverse inversely to make more current queries more gas efficient\n        do {\n            epochIndex--;\n            Epoch storage epoch = epochs[epochIndex];\n            if (epoch.startTime <= cutoffEpoch) {\n                break;\n            }\n            supply += epoch.supply;\n        } while (epochIndex > 0);\n\n        return supply;\n    }\n\n    //supply of all properly locked balances at the given epoch\n    function totalSupplyAtEpoch(uint256 _epochIndex)\n        external\n        view\n        returns (uint256 supply)\n    {\n        uint256 epochStart = epochs[_epochIndex].startTime;\n\n        uint256 cutoffEpoch = epochStart - lockDuration;\n        uint256 currentEpoch = _currentEpoch();\n\n        //do not include current epoch's supply\n        if (epochs[_epochIndex].startTime == currentEpoch) {\n            _epochIndex--;\n        }\n\n        //traverse inversely to make more current queries more gas efficient\n        for (uint256 i = _epochIndex; i + 1 != 0; i--) {\n            Epoch storage epoch = epochs[i];\n            if (epoch.startTime <= cutoffEpoch) {\n                break;\n            }\n            supply += epochs[i].supply;\n        }\n\n        return supply;\n    }\n\n    //find an epoch index based on timestamp\n    function findEpochId(uint256 _time) external view returns (uint256 epoch) {\n        uint256 max = epochs.length - 1;\n        uint256 min = 0;\n\n        //convert to start point\n        _time = (_time / epochDuration) * epochDuration;\n\n        for (uint256 i = 0; i < 128; i++) {\n            if (min >= max) break;\n\n            uint256 mid = (min + max + 1) / 2;\n            uint256 midEpochBlock = epochs[mid].startTime;\n            if (midEpochBlock == _time) {\n                //found\n                return mid;\n            } else if (midEpochBlock < _time) {\n                min = mid;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n\n    // Information on a user's locked balances\n    function lockedBalances(address _user)\n        external\n        view\n        returns (\n            uint256 total,\n            uint256 unlockable,\n            uint256 locked,\n            LockedBalance[] memory lockData\n        )\n    {\n        LockedBalance[] storage locks = userLocks[_user];\n        Balances storage userBalance = balances[_user];\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\n        uint256 idx;\n        for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\n            if (locks[i].unlockTime > block.timestamp) {\n                if (idx == 0) {\n                    lockData = new LockedBalance[](locks.length - i);\n                }\n                lockData[idx] = locks[i];\n                idx++;\n                locked += locks[i].locked;\n            } else {\n                unlockable += locks[i].locked;\n            }\n        }\n        return (userBalance.lockedAmount, unlockable, locked, lockData);\n    }\n\n    //number of epochs\n    function epochCount() external view returns (uint256) {\n        return epochs.length;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function checkpointEpoch() external {\n        _checkpointEpoch();\n    }\n\n    //insert a new epoch if needed. fill in any gaps\n    function _checkpointEpoch() internal {\n        uint256 currentEpoch = _currentEpoch();\n\n        //check to add\n        //first epoch add in constructor, no need to check 0 length\n        if (epochs[epochs.length - 1].startTime < currentEpoch) {\n            //fill any epoch gaps\n            while (epochs[epochs.length - 1].startTime != currentEpoch) {\n                uint256 nextEpochDate = epochs[epochs.length - 1].startTime +\n                    epochDuration;\n                epochs.push(Epoch({supply: 0, startTime: nextEpochDate}));\n            }\n        }\n    }\n\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\n    function lock(address _account, uint256 _amount)\n        external\n        nonReentrant\n        updateReward(_account)\n    {\n        //pull tokens\n        lockingToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        //lock\n        _lock(_account, _amount);\n    }\n\n    //lock tokens\n    function _lock(address _account, uint256 _amount) internal {\n        require(_amount > 0, \"Cannot lock 0 tokens\");\n        require(!isShutdown, \"Contract is in shutdown\");\n\n        Balances storage userBalance = balances[_account];\n\n        //must try check pointing epoch first\n        _checkpointEpoch();\n\n        //add user balances\n        userBalance.lockedAmount += _amount;\n        //add to total supplies\n        totalLockedSupply += _amount;\n\n        //add user lock records or add to current\n        uint256 currentEpochStartTime = _currentEpoch();\n        uint256 unlockTime = currentEpochStartTime + lockDuration; // lock duration = 16 weeks + current week = 17 weeks\n\n        uint256 idx = userLocks[_account].length;\n        // if its the first lock or the last lock has shorter unlock time than this lock\n        if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\n            userLocks[_account].push(\n                LockedBalance({locked: _amount, unlockTime: unlockTime})\n            );\n        } else {\n            LockedBalance storage userLock = userLocks[_account][idx - 1];\n            userLock.locked += _amount;\n        }\n\n        //update epoch supply, epoch checkpointed above so safe to add to latest\n        Epoch storage currentEpoch = epochs[epochs.length - 1];\n        currentEpoch.supply += _amount;\n\n        emit Locked(_account, _amount);\n    }\n\n    // Withdraw all currently locked tokens where the unlock time has passed\n    function _processExpiredLocks(\n        address _account,\n        bool _relock,\n        address _withdrawTo,\n        address _rewardAddress,\n        uint256 _checkDelay\n    ) internal updateReward(_account) {\n        LockedBalance[] storage locks = userLocks[_account];\n        Balances storage userBalance = balances[_account];\n        uint256 unlockedAmount;\n        uint256 totalLocks = locks.length;\n        uint256 reward = 0;\n\n        require(totalLocks > 0, \"Account has no locks\");\n        //if time is beyond last lock, can just bundle everything together\n        if (\n            isShutdown ||\n            locks[totalLocks - 1].unlockTime <= block.timestamp - _checkDelay\n        ) {\n            unlockedAmount = userBalance.lockedAmount;\n\n            //dont delete, just set next index\n            userBalance.nextUnlockIndex = totalLocks;\n\n            //check for kick reward\n            //this wont have the exact reward rate that you would get if looped through\n            //but this section is supposed to be for quick and easy low gas processing of all locks\n            //we'll assume that if the reward was good enough someone would have processed at an earlier epoch\n            if (_checkDelay > 0) {\n                uint256 currentEpoch = ((block.timestamp - _checkDelay) /\n                    epochDuration) * epochDuration;\n\n                uint256 overdueEpochCount = (currentEpoch -\n                    locks[totalLocks - 1].unlockTime) / epochDuration;\n\n                uint256 rewardRate = Math.min(\n                    kickRewardPerEpoch * (overdueEpochCount + 1),\n                    denominator\n                );\n\n                reward =\n                    (locks[totalLocks - 1].locked * rewardRate) /\n                    denominator;\n            }\n        } else {\n            // we start on nextUnlockIndex since everything before that has already been processed\n            uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\n            for (uint256 i = nextUnlockIndex; i < totalLocks; i++) {\n                //unlock time must be less or equal to time\n                if (locks[i].unlockTime > block.timestamp - _checkDelay) break;\n\n                //add to cumulative amounts\n                unlockedAmount += locks[i].locked;\n\n                //check for kick reward\n                //each epoch over due increases reward\n                if (_checkDelay > 0) {\n                    uint256 currentEpoch = ((block.timestamp - _checkDelay) /\n                        epochDuration) * epochDuration;\n\n                    uint256 overdueEpochCount = (currentEpoch -\n                        locks[i].unlockTime) / epochDuration;\n\n                    uint256 rewardRate = Math.min(\n                        kickRewardPerEpoch * (overdueEpochCount + 1),\n                        denominator\n                    );\n                    reward += (locks[i].locked * rewardRate) / denominator;\n                }\n                //set next unlock index\n                nextUnlockIndex++;\n            }\n            //update next unlock index\n            userBalance.nextUnlockIndex = nextUnlockIndex;\n        }\n        require(unlockedAmount > 0, \"No expired locks present\");\n\n        //update user balances and total supplies\n        userBalance.lockedAmount = userBalance.lockedAmount - unlockedAmount;\n        totalLockedSupply -= unlockedAmount;\n\n        emit Withdrawn(_account, unlockedAmount, _relock);\n\n        //send process incentive\n        if (reward > 0) {\n            //reduce return amount by the kick reward\n            unlockedAmount -= reward;\n\n            lockingToken.safeTransfer(_account, reward);\n\n            emit KickReward(_rewardAddress, _account, reward);\n        }\n\n        //relock or return to user\n        if (_relock) {\n            _lock(_withdrawTo, unlockedAmount);\n        } else {\n            // transfer unlocked amount - kick reward (if present)\n            lockingToken.safeTransfer(_withdrawTo, unlockedAmount);\n        }\n    }\n\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\n    function processExpiredLocks(bool _relock, address _withdrawTo)\n        external\n        nonReentrant\n    {\n        _processExpiredLocks(msg.sender, _relock, _withdrawTo, msg.sender, 0);\n    }\n\n    function kickExpiredLocks(address _account) external nonReentrant {\n        //allow kick after grace period of 'kickRewardEpochDelay'\n        _processExpiredLocks(\n            _account,\n            false,\n            _account,\n            msg.sender,\n            epochDuration * kickRewardEpochDelay\n        );\n    }\n\n    // Claim all pending rewards\n    function getReward(address _account)\n        public\n        nonReentrant\n        updateReward(_account)\n    {\n        for (uint256 i; i < rewardTokens.length; i++) {\n            address _rewardsToken = rewardTokens[i];\n            uint256 reward = rewards[_account][_rewardsToken];\n            if (reward > 0) {\n                rewards[_account][_rewardsToken] = 0;\n                IERC20(_rewardsToken).safeTransfer(_account, reward);\n\n                emit RewardPaid(_account, _rewardsToken, reward);\n            }\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // todo: not quite clear ?\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal {\n        Reward storage tokenRewardData = rewardData[_rewardsToken];\n\n        if (block.timestamp >= tokenRewardData.periodFinish) {\n            tokenRewardData.rewardRate = _reward / epochDuration;\n        } else {\n            uint256 remaining = tokenRewardData.periodFinish - block.timestamp;\n\n            uint256 leftover = remaining * tokenRewardData.rewardRate;\n            tokenRewardData.rewardRate = (_reward + leftover) / epochDuration;\n        }\n\n        tokenRewardData.lastUpdateTime = block.timestamp;\n        tokenRewardData.periodFinish = block.timestamp + epochDuration;\n    }\n\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward)\n        external\n        updateReward(address(0))\n    {\n        require(rewardDistributors[_rewardsToken][msg.sender]);\n        require(_reward > 0, \"No reward\");\n\n        _notifyReward(_rewardsToken, _reward);\n\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\n        // of transactions required and ensure correctness of the _reward amount\n        IERC20(_rewardsToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _reward\n        );\n\n        emit RewardAdded(_rewardsToken, _reward);\n    }\n\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\n        external\n        onlyOwner\n    {\n        require(\n            _tokenAddress != address(lockingToken),\n            \"Cannot withdraw staking token\"\n        );\n        require(\n            rewardData[_tokenAddress].lastUpdateTime == 0,\n            \"Cannot withdraw reward token\"\n        );\n        IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address _account) {\n        {\n            //stack too deep\n            Balances storage userBalance = balances[_account];\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n                address token = rewardTokens[i];\n                // todo: why ? just to cast to unit208 ?\n                //                rewardData[token].rewardPerTokenStored = _rewardPerToken(token)\n                //                    .to208();\n                rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(\n                    rewardData[token].periodFinish\n                );\n                if (_account != address(0)) {\n                    rewards[_account][token] = _earned(\n                        _account,\n                        token,\n                        userBalance.lockedAmount\n                    );\n                    userRewardPerTokenPaid[_account][token] = rewardData[token]\n                        .rewardPerTokenStored;\n                }\n            }\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    event RewardAdded(address indexed _token, uint256 _reward);\n    event Locked(address indexed _user, uint256 _lockedAmount);\n    event Withdrawn(address indexed _user, uint256 _amount, bool _relocked);\n    event KickReward(\n        address indexed _user,\n        address indexed _kicked,\n        uint256 _reward\n    );\n    event RewardPaid(\n        address indexed _user,\n        address indexed _rewardsToken,\n        uint256 _reward\n    );\n    event Recovered(address _token, uint256 _amount);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/mocks/RewarderMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\nimport \"../interfaces/IRewarder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract RewarderMock is IRewarder {\n    using SafeERC20 for IERC20;\n    uint256 private immutable rewardMultiplier;\n    IERC20 private immutable rewardToken;\n    uint256 private constant REWARD_TOKEN_DIVISOR = 1e18;\n    address private immutable BEETHOVEN_MASTERCHEF;\n\n    constructor(\n        uint256 _rewardMultiplier,\n        IERC20 _rewardToken,\n        address _BEETHOVEN_MASTERCHEF\n    ) {\n        rewardMultiplier = _rewardMultiplier;\n        rewardToken = _rewardToken;\n        BEETHOVEN_MASTERCHEF = _BEETHOVEN_MASTERCHEF;\n    }\n\n    function onBeetsReward(\n        uint256,\n        address,\n        address to,\n        uint256 beetsAmount,\n        uint256\n    ) external override onlyMCV2 {\n        uint256 pendingReward = (beetsAmount * rewardMultiplier) /\n            REWARD_TOKEN_DIVISOR;\n        uint256 rewardBal = rewardToken.balanceOf(address(this));\n        if (pendingReward > rewardBal) {\n            rewardToken.safeTransfer(to, rewardBal);\n        } else {\n            rewardToken.safeTransfer(to, pendingReward);\n        }\n    }\n\n    function pendingTokens(\n        uint256,\n        address,\n        uint256 beetsAmount\n    )\n        external\n        view\n        override\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        IERC20[] memory _rewardTokens = new IERC20[](1);\n        _rewardTokens[0] = (rewardToken);\n        uint256[] memory _rewardAmounts = new uint256[](1);\n        _rewardAmounts[0] =\n            (beetsAmount * rewardMultiplier) /\n            REWARD_TOKEN_DIVISOR;\n        return (_rewardTokens, _rewardAmounts);\n    }\n\n    modifier onlyMCV2() {\n        require(\n            msg.sender == BEETHOVEN_MASTERCHEF,\n            \"Only MCV2 can call this function.\"\n        );\n        _;\n    }\n}\n"
    },
    "contracts/mocks/RewarderBrokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\nimport \"../interfaces/IRewarder.sol\";\n\ncontract RewarderBrokenMock is IRewarder {\n    function onBeetsReward(\n        uint256,\n        address,\n        address,\n        uint256,\n        uint256\n    ) external pure override {\n        revert(\"mock failure\");\n    }\n\n    function pendingTokens(\n        uint256,\n        address,\n        uint256\n    ) external pure override returns (IERC20[] memory, uint256[] memory) {\n        revert(\"mock failure\");\n    }\n}\n"
    },
    "contracts/mocks/ComplexRewarderTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//\npragma solidity ^0.8.0;\n//pragma experimental ABIEncoderV2;\nimport \"../interfaces/IRewarder.sol\";\n\n//import \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\n//import \"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\";\n//import \"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\";\n\n//import \"../MasterChefV2.sol.ref\";\n//\n///// @author @0xKeno\n//contract ComplexRewarderTime is IRewarder, BoringOwnable {\ncontract ComplexRewarderTime {\n    //    using BoringMath for uint256;\n    //    using BoringMath128 for uint128;\n    //    using BoringERC20 for IERC20;\n    //\n    //    IERC20 private immutable rewardToken;\n    //\n    //    /// @notice Info of each MCV2 user.\n    //    /// `amount` LP token amount the user has provided.\n    //    /// `rewardDebt` The amount of SUSHI entitled to the user.\n    //    struct UserInfo {\n    //        uint256 amount;\n    //        uint256 rewardDebt;\n    //    }\n    //\n    //    /// @notice Info of each MCV2 pool.\n    //    /// `allocPoint` The amount of allocation points assigned to the pool.\n    //    /// Also known as the amount of SUSHI to distribute per block.\n    //    struct PoolInfo {\n    //        uint128 accSushiPerShare;\n    //        uint64 lastRewardTime;\n    //        uint64 allocPoint;\n    //    }\n    //\n    //    /// @notice Info of each pool.\n    //    mapping (uint256 => PoolInfo) public poolInfo;\n    //\n    //    uint256[] public poolIds;\n    //\n    //    /// @notice Info of each user that stakes LP tokens.\n    //    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    //    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    //    uint256 totalAllocPoint;\n    //\n    //    uint256 public rewardPerSecond;\n    //    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n    //\n    //    address private immutable MASTERCHEF_V2;\n    //\n    //    event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    //    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\n    //    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n    //    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSushiPerShare);\n    //    event LogRewardPerSecond(uint256 rewardPerSecond);\n    //    event LogInit();\n    //\n    //    constructor (IERC20 _rewardToken, uint256 _rewardPerSecond, address _MASTERCHEF_V2) public {\n    //        rewardToken = _rewardToken;\n    //        rewardPerSecond = _rewardPerSecond;\n    //        MASTERCHEF_V2 = _MASTERCHEF_V2;\n    //    }\n    //\n    //\n    //    function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {\n    //        PoolInfo memory pool = updatePool(pid);\n    //        UserInfo storage user = userInfo[pid][_user];\n    //        uint256 pending;\n    //        if (user.amount > 0) {\n    //            pending =\n    //                (user.amount.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION).sub(\n    //                    user.rewardDebt\n    //                );\n    //            rewardToken.safeTransfer(to, pending);\n    //        }\n    //        user.amount = lpToken;\n    //        user.rewardDebt = lpToken.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION;\n    //        emit LogOnReward(_user, pid, pending, to);\n    //    }\n    //\n    //    function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {\n    //        IERC20[] memory _rewardTokens = new IERC20[](1);\n    //        _rewardTokens[0] = (rewardToken);\n    //        uint256[] memory _rewardAmounts = new uint256[](1);\n    //        _rewardAmounts[0] = pendingToken(pid, user);\n    //        return (_rewardTokens, _rewardAmounts);\n    //    }\n    //\n    //    /// @notice Sets the sushi per second to be distributed. Can only be called by the owner.\n    //    /// @param _rewardPerSecond The amount of Sushi to be distributed per second.\n    //    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n    //        rewardPerSecond = _rewardPerSecond;\n    //        emit LogRewardPerSecond(_rewardPerSecond);\n    //    }\n    //\n    //    modifier onlyMCV2 {\n    //        require(\n    //            msg.sender == MASTERCHEF_V2,\n    //            \"Only MCV2 can call this function.\"\n    //        );\n    //        _;\n    //    }\n    //\n    //    /// @notice Returns the number of MCV2 pools.\n    //    function poolLength() public view returns (uint256 pools) {\n    //        pools = poolIds.length;\n    //    }\n    //\n    //    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    //    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    //    /// @param allocPoint AP of the new pool.\n    //    /// @param _pid Pid on MCV2\n    //    function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\n    //        require(poolInfo[_pid].lastRewardTime == 0, \"Pool already exists\");\n    //        uint256 lastRewardTime = block.timestamp;\n    //        totalAllocPoint = totalAllocPoint.add(allocPoint);\n    //\n    //        poolInfo[_pid] = PoolInfo({\n    //            allocPoint: allocPoint.to64(),\n    //            lastRewardTime: lastRewardTime.to64(),\n    //            accSushiPerShare: 0\n    //        });\n    //        poolIds.push(_pid);\n    //        emit LogPoolAddition(_pid, allocPoint);\n    //    }\n    //\n    //    /// @notice Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner.\n    //    /// @param _pid The index of the pool. See `poolInfo`.\n    //    /// @param _allocPoint New AP of the pool.\n    //    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n    //        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n    //        poolInfo[_pid].allocPoint = _allocPoint.to64();\n    //        emit LogSetPool(_pid, _allocPoint);\n    //    }\n    //\n    //    /// @notice View function to see pending Token\n    //    /// @param _pid The index of the pool. See `poolInfo`.\n    //    /// @param _user Address of user.\n    //    /// @return pending SUSHI reward for a given user.\n    //    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\n    //        PoolInfo memory pool = poolInfo[_pid];\n    //        UserInfo storage user = userInfo[_pid][_user];\n    //        uint256 accSushiPerShare = pool.accSushiPerShare;\n    //        uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);\n    //        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n    //            uint256 time = block.timestamp.sub(pool.lastRewardTime);\n    //            uint256 sushiReward = time.mul(rewardPerSecond).mul(pool.allocPoint) / totalAllocPoint;\n    //            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);\n    //        }\n    //        pending = (user.amount.mul(accSushiPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\n    //    }\n    //\n    //    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    //    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    //    function massUpdatePools(uint256[] calldata pids) external {\n    //        uint256 len = pids.length;\n    //        for (uint256 i = 0; i < len; ++i) {\n    //            updatePool(pids[i]);\n    //        }\n    //    }\n    //\n    //    /// @notice Update reward variables of the given pool.\n    //    /// @param pid The index of the pool. See `poolInfo`.\n    //    /// @return pool Returns the pool that was updated.\n    //    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    //        pool = poolInfo[pid];\n    //        if (block.timestamp > pool.lastRewardTime) {\n    //            uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);\n    //\n    //            if (lpSupply > 0) {\n    //                uint256 time = block.timestamp.sub(pool.lastRewardTime);\n    //                uint256 sushiReward = time.mul(rewardPerSecond).mul(pool.allocPoint) / totalAllocPoint;\n    //                pool.accSushiPerShare = pool.accSushiPerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());\n    //            }\n    //            pool.lastRewardTime = block.timestamp.to64();\n    //            poolInfo[pid] = pool;\n    //            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSushiPerShare);\n    //        }\n    //    }\n    //\n}\n"
    },
    "contracts/mocks/ComplexRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//// SPDX-License-Identifier: MIT\n//\npragma solidity ^0.8.0;\n//pragma experimental ABIEncoderV2;\nimport \"../interfaces/IRewarder.sol\";\n\n//import \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\n//import \"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\";\n//import \"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\";\n\n//import \"../MasterChefV2.sol.ref\";\n//\n///// @author @0xKeno\n//contract ComplexRewarder is IRewarder, BoringOwnable {\ncontract ComplexRewarder {\n    //    using BoringMath for uint256;\n    //    using BoringMath128 for uint128;\n    //    using BoringERC20 for IERC20;\n    //\n    //    IERC20 private immutable rewardToken;\n    //\n    //    /// @notice Info of each MCV2 user.\n    //    /// `amount` LP token amount the user has provided.\n    //    /// `rewardDebt` The amount of SUSHI entitled to the user.\n    //    struct UserInfo {\n    //        uint256 amount;\n    //        uint256 rewardDebt;\n    //    }\n    //\n    //    /// @notice Info of each MCV2 pool.\n    //    /// `allocPoint` The amount of allocation points assigned to the pool.\n    //    /// Also known as the amount of SUSHI to distribute per block.\n    //    struct PoolInfo {\n    //        uint128 accSushiPerShare;\n    //        uint64 lastRewardBlock;\n    //        uint64 allocPoint;\n    //    }\n    //\n    //    /// @notice Info of each pool.\n    //    mapping (uint256 => PoolInfo) public poolInfo;\n    //\n    //    uint256[] public poolIds;\n    //\n    //    /// @notice Info of each user that stakes LP tokens.\n    //    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    //    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    //    uint256 totalAllocPoint;\n    //\n    //    uint256 public tokenPerBlock;\n    //    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n    //\n    //    address private immutable MASTERCHEF_V2;\n    //\n    //    event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    //    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\n    //    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n    //    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\n    //    event LogInit();\n    //\n    //    constructor (IERC20 _rewardToken, uint256 _tokenPerBlock, address _MASTERCHEF_V2) public {\n    //        rewardToken = _rewardToken;\n    //        tokenPerBlock = _tokenPerBlock;\n    //        MASTERCHEF_V2 = _MASTERCHEF_V2;\n    //    }\n    //\n    //\n    //    function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {\n    //        PoolInfo memory pool = updatePool(pid);\n    //        UserInfo storage user = userInfo[pid][_user];\n    //        uint256 pending;\n    //        if (user.amount > 0) {\n    //            pending =\n    //                (user.amount.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION).sub(\n    //                    user.rewardDebt\n    //                );\n    //            rewardToken.safeTransfer(to, pending);\n    //        }\n    //        user.amount = lpToken;\n    //        user.rewardDebt = lpToken.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION;\n    //        emit LogOnReward(_user, pid, pending, to);\n    //    }\n    //\n    //    function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {\n    //        IERC20[] memory _rewardTokens = new IERC20[](1);\n    //        _rewardTokens[0] = (rewardToken);\n    //        uint256[] memory _rewardAmounts = new uint256[](1);\n    //        _rewardAmounts[0] = pendingToken(pid, user);\n    //        return (_rewardTokens, _rewardAmounts);\n    //    }\n    //\n    //    modifier onlyMCV2 {\n    //        require(\n    //            msg.sender == MASTERCHEF_V2,\n    //            \"Only MCV2 can call this function.\"\n    //        );\n    //        _;\n    //    }\n    //\n    //    /// @notice Returns the number of MCV2 pools.\n    //    function poolLength() public view returns (uint256 pools) {\n    //        pools = poolIds.length;\n    //    }\n    //\n    //    /// @notice Add a new LP to the pool.  Can only be called by the owner.\n    //    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    //    /// @param allocPoint AP of the new pool.\n    //    /// @param _pid Pid on MCV2\n    //    function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\n    //        require(poolInfo[_pid].lastRewardBlock == 0, \"Pool already exists\");\n    //        uint256 lastRewardBlock = block.number;\n    //        totalAllocPoint = totalAllocPoint.add(allocPoint);\n    //\n    //        poolInfo[_pid] = PoolInfo({\n    //            allocPoint: allocPoint.to64(),\n    //            lastRewardBlock: lastRewardBlock.to64(),\n    //            accSushiPerShare: 0\n    //        });\n    //        poolIds.push(_pid);\n    //        emit LogPoolAddition(_pid, allocPoint);\n    //    }\n    //\n    //    /// @notice Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner.\n    //    /// @param _pid The index of the pool. See `poolInfo`.\n    //    /// @param _allocPoint New AP of the pool.\n    //    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n    //        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n    //        poolInfo[_pid].allocPoint = _allocPoint.to64();\n    //        emit LogSetPool(_pid, _allocPoint);\n    //    }\n    //\n    //    /// @notice View function to see pending Token\n    //    /// @param _pid The index of the pool. See `poolInfo`.\n    //    /// @param _user Address of user.\n    //    /// @return pending SUSHI reward for a given user.\n    //    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\n    //        PoolInfo memory pool = poolInfo[_pid];\n    //        UserInfo storage user = userInfo[_pid][_user];\n    //        uint256 accSushiPerShare = pool.accSushiPerShare;\n    //        uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);\n    //        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n    //            uint256 blocks = block.number.sub(pool.lastRewardBlock);\n    //            uint256 sushiReward = blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\n    //            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);\n    //        }\n    //        pending = (user.amount.mul(accSushiPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\n    //    }\n    //\n    //    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    //    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    //    function massUpdatePools(uint256[] calldata pids) external {\n    //        uint256 len = pids.length;\n    //        for (uint256 i = 0; i < len; ++i) {\n    //            updatePool(pids[i]);\n    //        }\n    //    }\n    //\n    //    /// @notice Update reward variables of the given pool.\n    //    /// @param pid The index of the pool. See `poolInfo`.\n    //    /// @return pool Returns the pool that was updated.\n    //    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    //        pool = poolInfo[pid];\n    //        require(pool.lastRewardBlock != 0, \"Pool does not exist\");\n    //        if (block.number > pool.lastRewardBlock) {\n    //            uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);\n    //\n    //            if (lpSupply > 0) {\n    //                uint256 blocks = block.number.sub(pool.lastRewardBlock);\n    //                uint256 sushiReward = blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\n    //                pool.accSushiPerShare = pool.accSushiPerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());\n    //            }\n    //            pool.lastRewardBlock = block.number.to64();\n    //            poolInfo[pid] = pool;\n    //            emit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\n    //        }\n    //    }\n    //\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}